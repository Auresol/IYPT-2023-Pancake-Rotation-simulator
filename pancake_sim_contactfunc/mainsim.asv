clc
clear all

% simulating time
limtime = 20;
alltime = 0;
delta_t = 1e-4;

% result setting
calculatingomega = true;
calculateomega_after = 10;

% result runtime parameter
totalomega = 0;

% container porperties
centiapply = true;
n = 10;
container_radius = 10;
container_radiusofswing = 30;
omega_c = 0;
container_frequency = 1;

radius = 1;

% container runtime parameter
totalrotation = 0;

% physics constants
worldSize = [10 10]; % [m]

% render setting
isrender = true;
isrenderline = true;
isrendercircle = true;
renderhertz = 100;
timefordisplay = 1;

% render runtime parameter
timeforrenderpass = 0;
pauseiteration = 0;

%ball_contactforce_constant = 4/3 * sqrt(radius/2) * young_modulus/(2*(1- poisson_cof * poisson_cof));

ballarr = ballgeneration(n);

if isrender == true

    % set up GUI
    fig = figure('Name', 'Example 1: Ball stack', 'Units', 'normalized', 'Position', [0.2 0.2 0.6 0.6]);
    
    % axes
    set(gca, 'OuterPosition', [0.1 0.2 0.8 0.8])
    axis([-10 worldSize(1) -10 worldSize(2)])
    axis square
    axis off
    
    % outer render
    diameter = container_radius*2;
    outerline = rectangle('Position',[-container_radius,-container_radius,diameter,diameter],'Curvature',[1,1],'EdgeColor', 'black');
    
    %balltemp = line([ballarr(1).position(1),ballarr(1).position(1)] , [-ballarr(1).position(2),ballarr(1).position(2)], 'color', 'black');
    
    % circles
    graphics = gobjects(n);
    linegraphic = gobjects(n);
    
    for circle = 1:n % skip edges
	    diameter = 2*radius;
	    temp = ballarr(circle).position(1,1:2) - radius;
    
	    position = [temp(1) temp(2) diameter diameter];
        graphics(circle) = rectangle('Position', position, 'Curvature', [1 1], 'EdgeColor', 'black', 'FaceColor', [0.75 + rand()*0.25 0.0 0.0]); % circles are drawn as squares with curved corners
    end

end



while alltime < limtime

    forcevector = zeros(n,3);
    torqueforcevector = zeros(n,3);
    
    % O(n^2) solution; naive compare
    for idx = 1:n

        if centiapply == true
        
            % centifugal force calculation
            % centifugal normal direction
            centifugal_direcvec = container_radiusofswing * [cos(totalrotation),sin(totalrotation),0] - ballarr(idx).position;
            centifugal_direcvec = centifugal_direcvec/magnitude(centifugal_direcvec);
    
            totalrotation = totalrotation + 2 * pi * delta_t * container_frequency;
            
            if totalrotation > 2 * pi
                totalrotation = totalrotation - 2*pi;
            end
            
            % apply centifugal
            forcevector(idx,:) = forcevector(idx,:) + ballarr(idx).mass * (2 * pi * container_frequency)^2 * (container_radiusofswing + ballarr(idx).position) * centifugal_direcvec;

        end

        if magnitude(ballarr(idx).position) + radius > container_radius
            
            [Fi,fi] = contactforce_wall(ballarr(idx),container_radius,delta_t);

            % apply force
            forcevector(idx,:) = forcevector(idx,:) + Fi;
            
            % friction angular momentum calculation
            torqueforcevector(idx,:) = torqueforcevector(idx,:) + fi;

        end
            
        for idy = (idx+1):n
            
            % distance size
            dis = magnitude(ballarr(idx).position - ballarr(idy).position);

            if dis < 2*radius

                [Fi,Fj,fi,fj] = contactforce_ball(ballarr(idx),ballarr(idy),delta_t);

                % apply force
                forcevector(idx,:) = forcevector(idx,:) + Fi;
                forcevector(idy,:) = forcevector(idy,:) + Fj;
                
                % friction angular momentum calculation
                torqueforcevector(idx,:) = torqueforcevector(idx,:) + fi;
                torqueforcevector(idy,:) = torqueforcevector(idy,:) + fj;
                
            end
        end
    end
     
    for iter = 1:n
        ballarr(iter) = applyforce(ballarr(iter),forcevector(iter,:),torqueforcevector(iter,:),delta_t);
    end
    
    alltime = alltime + delta_t;
    timeforrenderpass = timeforrenderpass + delta_t;
  
    if timeforrenderpass > timefordisplay
        timeforrenderpass = timeforrenderpass - timefordisplay;
        disp("TIME PASS " + alltime);
    end

    if calculatingomega == true && alltime > calculateomega_after
        totalomega = totalomega + calculate_omega(ballarr,n,delta_t);
    end

    if pauseiteration == renderhertz && isrender == true
        pauseiteration = 0;
        % ball render
        for circle = 1:n % skip edges
            %radius = ballarr(circle).radius;
            
            diameter = 2 * radius;
	        temp = ballarr(circle).position(1,1:2) - radius;
        
	        position = [temp(1) temp(2) 2 2];
            
            set(graphics(circle), 'Position', position);
        end
        
        % line render
        if isrenderline == true
    
            delete(linegraphic);
            linegraphic = gobjects(n);
    
            for circle = 1:n 
                %radius = ballarr(circle).radius;

                rotated = ballarr(circle).rotation;
                position = ballarr(circle).position;
                
                xconst = radius*cos(rotated(3));
                yconst = radius*sin(rotated(3));
                linegraphic(circle) = line(position(1) + [-xconst, xconst], position(2) + [-yconst,yconst], 'color', 'black');
    
            end
    
        end
        pause(0.01);

    else
        pauseiteration = pauseiteration + 1;

    end
       
    %delete(balltemp)
    %balltemp = line([ballarr(1).position(1) - radius,ballarr(1).position(1) + radius] , [ballarr(1).position(2),ballarr(1).position(2)], 'color', 'black');
    
    
    
end

disp(totalomega/ pauseiteration)
disp(totalomega/ (2*pi*pauseiteration))
    